abline(h=17, col = "red") +
theme_bw()
ggplot(accumulation, aes(x=Camera.trap.days, y=species)) +
geom_line(aes(y=species-sd), colour = "grey50", linetype= "dotted")+
geom_line(aes(y=species+sd), colour = "grey50", linetype= "dotted")+
geom_line() + ylab("Number of Species") + xlab("Camera Trap Days") +
abline(h=17) +
theme_bw()
ggplot(accumulation, aes(x=Camera.trap.days, y=species)) +
geom_line(aes(y=species-sd), colour = "grey50", linetype= "dotted")+
geom_line(aes(y=species+sd), colour = "grey50", linetype= "dotted")+
geom_line() + ylab("Number of Species") + xlab("Camera Trap Days") +
theme_bw()
abline(h=17, col = "red")
plot(accumulation)
abline(h=17, col = "red")
ggplot(accumulation, aes(x=Camera.trap.days, y=species)) +
geom_line(aes(y=species-sd), colour = "grey50", linetype= "dotted")+
geom_line(aes(y=species+sd), colour = "grey50", linetype= "dotted")+
geom_line() + ylab("Number of Species") + xlab("Camera Trap Days") +
theme_bw()+ abline(h=17, col = "red")
ggplot(accumulation, aes(x=Camera.trap.days, y=species)) +
geom_line(aes(y=species-sd), colour = "grey50", linetype= "dotted")+
geom_line(aes(y=species+sd), colour = "grey50", linetype= "dotted")+
geom_line() + ylab("Number of Species") + xlab("Camera Trap Days") +
theme_bw()+ geom_hline(yintercept = 17, color = "red")
ggsave("Species_Accumulation.JPG", device = "jpg")
rm(list = ls())
library(tidyjson) #may get error; if so, load from github
library(githubinstall)
install.packages("githubinstall")
library(githubinstall)
githubinstall("tidyjson")
rm(list = ls())
library(tidyjson) #may get error; if so, load from github
library(magrittr) #allows piping beyond tidyverse
library(jsonlite)
library(dplyr)
library(stringr)
library(tidyr)
library(lubridate)
install.packages("lubridate")
rm(list = ls())
library(tidyjson) #may get error; if so, load from github
library(magrittr) #allows piping beyond tidyverse
library(jsonlite)
library(dplyr)
library(stringr)
library(tidyr)
library(lubridate)
source(file = "flattening_script.R")
source(file = "flattening_functions.R")
#this two calls load the zooniverse functions to the workspace; note that if either is not in the same folder as this code, you need to specify the file path.
jdata <- character()
survey_id <- character()
workflow_id_num <- numeric()
workflow_version_num <- numeric()
getwd()
project_name <- "NoCoWild"
classifications_file <- "/Users/lmklei15/Dropbox/CamTrapAnalysis/sampledatasmall.csv"
jdata <- read.csv(classifications_file, stringsAsFactors = F)
View(jdata)
check_workflow(jdata) %>% View
workflow_id_num <- 9599
workflow_version_num <- 123.17
filter
jdata <- jdata %>% filter(., workflow_id == workflow_id_num, workflow_version == workflow_version_num)
jdata$annotations[1] %>% prettify
View(jdata)
#View_json(jdata)
survey_id <- c("T0")#determine from prettify
single_choice_Qs <-  c("choice", "HOWMANY", "SNOWDEPTH", "YOUNGPRESENT", "ANTLERSPRESENT", "PRECIPITATIONRAINSNOW") #determine from prettify call
single_choice_colnames  <-  c("choice","Number", "SnowDepth", "Young","Antlers", "Precipitation")#determine from View_json call
multi_choice_Qs <- c("WHATBEHAVIORSDOYOUSEE")#determine from View_json call
multi_choice_colnames <- c("behavior")#determine from View_json call
An_flattened <- run_json_parsing(data = jdata) #requires flattening_functions file to be in same folder and sourced.
An_flattened <- run_json_parsing(data = jdata) #requires flattening_functions file to be in same folder and sourced.
jdata$subject_data[1] %>% prettify
subjects<-purrr::map(jdata$subject_data, jsonlite::fromJSON, flatten = T)
#this brought in the subject_data as a list where it now shows up in the environment
View(subjects)
ForestType<-sapply(subjects, function(x)x[[1]]$`!ForestType`, simplify = T)
ForestName<-sapply(subjects, function(x)x[[1]]$`#ForestName`, simplify = T)
Image1<-sapply(subjects, function(x)x[[1]]$`Image1`, simplify = T)
Image2<-sapply(subjects, function(x)x[[1]]$`Image2`, simplify = T)
Image3<-sapply(subjects, function(x)x[[1]]$`Image3`, simplify = T)
Camera<-sapply(subjects, function(x)x[[1]]$`#CamNumber`, simplify = T)
SDCard<-sapply(subjects, function(x)x[[1]]$`#SDCardNum`, simplify = T)
PhotoBatch<-sapply(subjects, function(x)x[[1]]$`!Batch`, simplify = T)
Class_Round<-sapply(subjects, function(x)x[[1]]$`!Round`, simplify = T)
classification_id<-jdata$classification_id
subject_ids<-jdata$subject_ids
user_name<-jdata$user_name
workflow_id<-jdata$workflow_id
workflow_version<-jdata$workflow_version
Sub_flattened<-as.data.frame(cbind(classification_id, user_name, workflow_id, workflow_version, ForestType, ForestName, Image1, Image2, Image3, Camera, SDCard, PhotoBatch, Class_Round))
View(subjects)
rm(list=ls())
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
library(chron) #works with chronological objects like dates and times
library(reshape) #restructures and aggregates data in a flexible way
library(vegan) #ecological analysis
library(plotrix) #visualize circular data
library(ggplot2) #producing graphics
library(maptools) #produce maps using GIS layers
masterDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/masterDF.csv")
source("TEAM library 1.7.R")
source("TEAM library 1.7.R")
gd()
getwd()
setwd("~/Dropbox/Zooniverse_work/Kate/Chapter_5_Steps/Chapter_5")
getwd()
source("TEAM library 1.7.R")
accumulation<-acc.curve(masterDF, 2019.01)
#There is a problem in this code that counts each photo as a camera trapping day.
View(acc.curve)
View(accumulation)
acc.curve <- function(dtaframe, year) {
require(reshape)
require(vegan)
yr <- dtaframe[dtaframe$Sampling.Event == year, ]
mat <- f.matrix.creator(yr)
pr <- melt(mat)
colnames(pr) <- c("Start.Date", "Date", "value", "species")
ev.sp <- cast(na.omit(pr), Start.Date + Date ~ species, sum)
ac <- specaccum(ev.sp[, -c(1:2)], method = "random", permutations = 100)
mt <- data.frame(ac$sites, ac$richness, ac$sd)
colnames(mt) <- c("Camera.trap.days", "species", "sd")
return(mt)
}
accumulation<-acc.curve(masterDF, 2019.01)
#There is a problem in this code that counts each photo as a camera trapping day.
View(accumulation)
View(event.sp)
acc.curve <- function(dtaframe, year) {
require(reshape)
require(vegan)
yr <- dtaframe[dtaframe$Sampling.Event == year, ]
mat <- f.matrix.creator(yr)
pr <- melt(mat)
colnames(pr) <- c("Start.Date", "Date", "value", "species")
ev.sp <- cast(na.omit(pr), Start.Date + Date ~ species, sum)
ac <- specaccum(ev.sp[, -c(2:3)], method = "random", permutations = 100)
mt <- data.frame(ac$sites, ac$richness, ac$sd)
colnames(mt) <- c("Camera.trap.days", "species", "sd")
return(mt)
}
accumulation<-acc.curve(masterDF, 2019.01)
acc.curve <- function(dtaframe, year) {
require(reshape)
require(vegan)
yr <- dtaframe[dtaframe$Sampling.Event == year, ]
mat <- f.matrix.creator(yr)
pr <- melt(mat)
colnames(pr) <- c("Sampling.Unit.Name", "Date", "value", "species")
ev.sp <- cast(na.omit(pr), Sampling.Unit.Name + Date ~ species, sum)
ac <- specaccum(ev.sp[, -c(2:3)], method = "random", permutations = 100)
mt <- data.frame(ac$sites, ac$richness, ac$sd)
colnames(mt) <- c("Camera.trap.days", "species", "sd")
return(mt)
}
accumulation<-acc.curve(masterDF, 2019.01)
View(f.matrix.creator)
newDF<- group_by(masterDF$ndays, masterDF$Start.Date), summarise(
newDF<- group_by(masterDF$ndays, masterDF$Start.Date) summarise(
newDF<- masterDF %>% group_by(ndays, Start.Date) %>% summarise(
bin= unique(masterDF$bin)
)
newDF<- masterDF %>% group_by(ndays, Start.Date) %>% unique(masterDF$bin)
newDF<- masterDF %>% group_by(ndays, Start.Date)
View(newDF)
newDF<- masterDF %>% filter(ndays, Start.Date, End.Date, bin, Photo.Date, Photo.Time, Sampling.Event) %>% group_by(ndays, Start.Date)
newDF<- filter(ndays)
newDF<- masterDF %>% filter(ndays)
newDF<- masterDF %>% filter(masterDF$ndays, masterDF$Start.Date, masterDF$End.Date, masterDF$bin, masterDF$Photo.Date, masterDF$Photo.Time, masterDF$Sampling.Event) %>% group_by(ndays, Start.Date)
newDF<- masterDF %>% filter(ndays, Start.Date, bin) %>% group_by(ndays, Start.Date)
newDF<- masterDF[,"ndays", "Start.Date", "bin", "Sampling.Event"]
newDF<- masterDF["ndays", "Start.Date", "bin", "Sampling.Event"]
newDF<- masterDF[ndays, Start.Date, bin, Sampling.Event]
newDF<- masterDF['ndays', 'Start.Date', 'bin', 'Sampling.Event']
newDF<- masterDF['ndays', 'Start.Date', 'bin', 'Sampling.Event',]
newDF<- masterDF['ndays', 'Start.Date', 'bin']
newDF<- masterDF %>% select('ndays', 'Start.Date', 'bin', 'Sampling.Event')
View(newDF)
newDF1<- aggregate(x=newDF)
newDF1<- aggregate(x=newDF, by = 'Start.Date', 'bin', FUN= unique)
newDF1<- aggregate(x=newDF, by = list('Start.Date', 'bin'), FUN= unique)
newDF1<- aggregate(x=newDF, by = list('Start.Date'), FUN= unique)
newDF1<- distinct(newDF, .keep_all = FALSE)
View(newDF1)
newDF1<- c("Sampling.Unit.Name", "Start.Date", "bin", "Sampling.Event")
View(newDF)
newDF1<- distinct(newDF, .keep_all = FALSE)
names(newDF1) <- c("Sampling.Unit.Name", "Start.Date", "bin", "Sampling.Event")
View(newDF1)
accumulation<-acc.curve(newDF1, 2019.01)
newDF<- masterDF %>% select('ndays', 'Start.Date', 'End.Date' 'bin', 'Sampling.Event')
newDF<- masterDF %>% select('ndays', 'Start.Date', 'End.Date'. 'bin', 'Sampling.Event')
newDF<- masterDF %>% select('ndays', 'Start.Date', 'End.Date', 'bin', 'Sampling.Event')
newDF1<- distinct(newDF, .keep_all = FALSE)
names(newDF1) <- c("Sampling.Unit.Name", "Start.Date", "End.Date", "bin", "Sampling.Event")
View(newDF1)
accumulation<-acc.curve(newDF1, 2019.01)
test<- filer(masterDF, ndays = 75)
test<- filter(masterDF, ndays = 75)
test<- filter(masterDF, ndays == 75)
View(test)
test<- filter(masterDF, ndays == 109)
View(test)
write.csv(newDF1, file = 'newDF1.csv')
library(readr)
testDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/newDF1.csv")
View(testDF)
accumulation<-acc.curve(testDF, 2019.01)
as.Date(testDF$Start.Date)
testDF$Start.Date<- as.Date(testDF$Start.Date)
testDF$Start.Date<- as.Date(testDF$Start.Date, format = %dd-%mm-%YY)
testDF$Start.Date<- as.Date(testDF$Start.Date, format = %d %m %Y)
testDF$Start.Date<- as.Date(testDF$Start.Date, format = "%d %m %Y")
testDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/newDF1.csv")
testDF$Start.Date<- ymd_hms(testDF$Start.Date)
testDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/newDF1.csv")
testDF$Start.Date<- ymd(testDF$Start.Date)
testDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/newDF1.csv")
testDF$Start.Date<- mdy(testDF$Start.Date)
testDF$End.Date<-mdy(testDF$End.Date)
accumulation<-acc.curve(testDF, 2019.01)
start.dates<-tapply(as.character(data$Start.Date),data$Sampling.Unit.Name,unique)
start.dates<-tapply(as.character(testDF$Start.Date),testDF$Sampling.Unit.Name,unique)
start.dates
f.matrix.creator<-function(data){
#results object
res<-list()
#get the dimensions of the matrix
#list if sanpling units
cams<-unique(data$Sampling.Unit.Name)
cams<-sort(cams)
rows<-length(cams)
#start and end dates of sampling periods
min<-min(data$Start.Date)
max<-max(data$End.Date)
cols<-max-min+1
#sampling period
date.header<-seq(from=min,to=max, by=1)
mat<-matrix(NA,rows,cols,dimnames=list(cams,as.character(date.header)))
#for all cameras, determine the open and close date and mark in the matrix
start.dates<-tapply(as.character(data$Start.Date),data$Sampling.Unit.Name,unique)
end.dates<-tapply(as.character(data$End.Date),data$Sampling.Unit.Name,unique)
#outline the sampling periods for each camera j
for(j in 1:length(start.dates)){
#for each camera beginning and end of sampling
low<-which(date.header==start.dates[j])
hi<-which(date.header==end.dates[j])
indx<-seq(from=low,to=hi)
mat[j,indx]<-0
}
mat.template<-mat
#get the species
species<-unique(data$bin)
#construct the matrix for each species i
for(i in 1:length(species)){
indx<-which(data$bin==species[i])
#dates and cameras when/where the species was photographed
dates<-data$Photo.Date[indx]
cameras<-data$Sampling.Unit.Name[indx]
dates.cameras<-data.frame(dates,cameras)
#unique combination of dates and cameras
dates.cameras<-unique(dates.cameras)
#fill in the matrix
for(j in 1:length(dates.cameras[,1])){
col<-which(date.header==dates.cameras[j,1])
row<-which(cams==dates.cameras[j,2])
mat[row,col]<-1
}
mat.nas<-is.na(mat)
sum.nas<-apply(mat.nas,2,sum)
indx.nas<-which(sum.nas==rows)
if(length(indx.nas)>0){
mat<-mat[,-indx.nas]
}
res<-c(res,list(mat))
#return the matrix to its original form
mat<-mat.template
}
names(res)<-species
#res<-lapply(res,f.dum)
res
}
accumulation<-acc.curve(testDF, 2019.01)
specAccum<- specaccum(testDF, method = "random", permutations = 100)
specAccum<- specaccum(masterDF, method = "random", permutations = 100)
View(event.sp)
View(accumulation)
rm(list=ls())
library(readr)
library(dplyr)
library(tidyr)
library(chron) #works with chronological objects like dates and times
library(reshape) #restructures and aggregates data in a flexible way
library(vegan) #ecological analysis
library(plotrix) #visualize circular data
library(ggplot2) #producing graphics
library(maptools) #produce maps using GIS layers
#Needed to run this in the console. Also needed to change directories in the console.
source("TEAM library 1.7.R")
source("TEAM library 1.7.R")
team_data<- read.csv(file= "/Users/kateandy/Dropbox/Zooniverse_work/Chapter_5_Steps/Chapter_5/teamexample.csv", sep= ",", stringsAsFactors=F)
getwd()
setwd("~/Dropbox/Zooniverse_work/Kate/Chapter_5_Steps/Chapter_5")
getwd()
team_data<- read.csv(file= "/Users/kateandy/Dropbox/Zooniverse_work/Chapter_5_Steps/Chapter_5/teamexample.csv", sep= ",", stringsAsFactors=F)
team_data<- read.csv(file= "/Users/kateandy/Dropbox/Zooniverse_work/Kate/Chapter_5_Steps/Chapter_5/teamexample.csv", sep= ",", stringsAsFactors=F)
View(team_data)
iucn.full<- read.csv ("/Users/kateandy/Dropbox/Zooniverse_work/Chapter_5_Steps/Chapter_5/IUCN.csv", sep =",", h=T)
iucn.full<- read.csv ("/Users/kateandy/Dropbox/Zooniverse_work/Kate/Chapter_5_Steps/Chapter_5/IUCN.csv", sep =",", h=T)
iucn<- iucn.full[, c("Class", "Order", "Family", "Genus", "Species")]
team<- merge(iucn, team_data, all.y=T)
data<- fix.dta(team)
View(data)
rm(list=ls())
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
library(chron) #works with chronological objects like dates and times
library(reshape) #restructures and aggregates data in a flexible way
library(vegan) #ecological analysis
library(plotrix) #visualize circular data
library(ggplot2) #producing graphics
library(maptools) #produce maps using GIS layers
masterDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/masterDF.csv")
source("TEAM library 1.7.R")
source("TEAM library 1.7.R")
View(masterDF)
newDF<- masterDF %>% select('Sampling.Unit.Name', 'Start.Date', 'End.Date', 'bin', 'Sampling.Event', 'Photo.Date', 'Photo.Time',)
View(newDF)
View(newDF)
newDF<- masterDF %>% select('Sampling.Unit.Name', 'Start.Date', 'End.Date', 'bin', 'Sampling.Event', 'Photo.Date', 'Photo.Time', 'td.photo')
accumulation<- acc.curve(newDF, 2019.01)
View(accumulation)
View(accumulation)
rm(list=ls())
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
library(chron) #works with chronological objects like dates and times
library(reshape) #restructures and aggregates data in a flexible way
library(vegan) #ecological analysis
library(plotrix) #visualize circular data
library(ggplot2) #producing graphics
library(maptools) #produce maps using GIS layers
masterDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/masterDF.csv")
View(masterDF)
source("TEAM library 1.7.R")
source("TEAM library 1.7.R")
accumulation<-acc.curve(masterDF, 2019.01)
masterDF$Start.Date<- mdy(masterDF$Start.Date)
masterDF$End.Date<-mdy(masterDF$End.Date)
masterDF$td.photo<- mdy_hm(masterDF$td.photo)
masterDF$Photo.Date<- mdy(masterDF$Photo.Date)
accumulation<-acc.curve(masterDF, 2019.01)
View(accumulation)
ggplot(accumulation, aes(x=Camera.trap.days, y=species)) +
geom_line(aes(y=species-sd), colour = "grey50", linetype= "dotted")+
geom_line(aes(y=species+sd), colour = "grey50", linetype= "dotted")+
geom_line() + ylab("Number of Species") + xlab("Camera Trap Days") +
theme_bw()+ geom_hline(yintercept = 17, color = "red")
ggsave("Species_Accumulation.JPG", device = "jpg")
rm(list=ls())
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
library(chron) #works with chronological objects like dates and times
library(reshape) #restructures and aggregates data in a flexible way
library(vegan) #ecological analysis
library(plotrix) #visualize circular data
library(ggplot2) #producing graphics
library(maptools) #produce maps using GIS layers
masterDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/masterDF.csv")
source("TEAM library 1.7.R")
source("TEAM library 1.7.R")
masterDF$Start.Date<- mdy(masterDF$Start.Date)
masterDF$End.Date<-mdy(masterDF$End.Date)
masterDF$td.photo<- mdy_hm(masterDF$td.photo)
masterDF$Photo.Date<- mdy(masterDF$Photo.Date)
accumulation<-acc.curve(masterDF, 2019.01)
#There is a problem in this code that counts each photo as a camera trapping day.
ggplot(accumulation, aes(x=Camera.trap.days, y=species)) +
geom_line(aes(y=species-sd), colour = "grey50", linetype= "dotted")+
geom_line(aes(y=species+sd), colour = "grey50", linetype= "dotted")+
geom_line() + ylab("Number of Species") + xlab("Camera Trap Days") +
theme_bw()+ geom_hline(yintercept = 17, color = "red")
ggsave("Species_Accumulation.JPG", device = "jpg")
library(readr)
Data <- read_csv("~/Dropbox/Zooniverse_work/Camera_Trapping_Ch5_Work/Data.csv")
View(Data)
rm(list=ls())
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
Data <- read.csv("Camera_Trapping_Ch5_Work/Data.csv")
Data <- read.csv("Camera_Trapping_Ch5_Work/Data.csv")
setwd("~/Dropbox/Zooniverse_work/Camera_Trapping_Ch5_Work")
Data <- read.csv("Camera_Trapping_Ch5_Work/Data.csv")
library(readr)
Data <- read_csv("~/Dropbox/Zooniverse_work/Camera_Trapping_Ch5_Work/Data.csv")
View(Data)
str(Data)
str(Data)
str(Data)
Species_Richness <- Data %>%
group_by(ForestName.y, Camera.y, ForestType) %>%
summarize(num_species=n_distinct(choice))
View(Species_Richness)
setwd("~/Dropbox/Zooniverse_work/Kate/Species_Accumulation_Curve")
rm(list=ls())
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
library(chron) #works with chronological objects like dates and times
library(reshape) #restructures and aggregates data in a flexible way
library(vegan) #ecological analysis
library(plotrix) #visualize circular data
library(ggplot2) #producing graphics
library(maptools) #produce maps using GIS layers
masterDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/masterDF.csv")
source("TEAM library 1.7.R")
source("TEAM library 1.7.R")
setwd("~/Dropbox/Zooniverse_work/Kate/Chapter_5_Steps/Chapter_5")
source("TEAM library 1.7.R")
accumulation<-acc.curve(masterDF, 2019.01)
View(masterDF)
rm(list=ls())
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
library(chron) #works with chronological objects like dates and times
library(reshape) #restructures and aggregates data in a flexible way
library(vegan) #ecological analysis
library(plotrix) #visualize circular data
library(ggplot2) #producing graphics
library(maptools) #produce maps using GIS layers
masterDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/masterDF.csv")
source("TEAM library 1.7.R")
source("TEAM library 1.7.R")
accumulation<-acc.curve(masterDF, 2019.01)
rm(list=ls())
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
library(chron) #works with chronological objects like dates and times
library(reshape) #restructures and aggregates data in a flexible way
library(vegan) #ecological analysis
library(plotrix) #visualize circular data
library(ggplot2) #producing graphics
library(maptools) #produce maps using GIS layers
masterDF <- read_csv("~/Dropbox/Zooniverse_work/Kate/masterDF.csv")
source("TEAM library 1.7.R")
source("TEAM library 1.7.R")
setwd("~/Dropbox/Zooniverse_work/Kate/Chapter_5_Steps/Chapter_5")
source("TEAM library 1.7.R")
accumulation<-acc.curve(masterDF, 2019.01)
masterDF$Start.Date<- as.Date(masterDF$Start.Date)
masterDF$Start.Date<- as.Date(as.character(masterDF$Start.Date))
masterDF$Start.Date<- mdy(masterDF$Start.Date)
masterDF$End.Date<- mdy(masterDF$End.Date)
accumulation<-acc.curve(masterDF, 2019.01)
masterDF$td.photo<- mdy_hm(masterDF$td.photo)
accumulation<-acc.curve(masterDF, 2019.01)
masterDF$Photo.Date<- mdy(masterDF$Photo.Date)
accumulation<-acc.curve(masterDF, 2019.01)
View(accumulation)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(readr)
DF <- read_csv("~/Dropbox/Zooniverse_work/Kate/Gus.csv")
dump<-which(DF$choice == "NOTHINGHERE" | DF$choice == "SOMETHINGHERE" | DF$choice == "HUMAN")
#now dump
DF<-DF[-dump,]
diversity<-DF %>% group_by(ForestName, choice) %>% summarize(
NumEvents = length(Camera)
)
library(tidyr)
divVegan<- spread(diversity, choice, NumEvents)
#replace NAs with zeros
divVegan[is.na(divVegan)] <- 0
#dump first column
vegReady<-divVegan[,-1]
div_shan<-diversity(vegReady, index = "shannon")
div_shan
div_simp<- diversity(vegReady, index = "simpson")
div_simp
library(tidyr)
Forest<- unique(divVegan$ForestName)
shanDiv<- as.data.frame(cbind(div_shan, Forest))
